{"version":3,"sources":["components/Header.js","components/Formulario.js","helper.js","components/Resumen.js","components/Resultado.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","preventDefault","plan","current","checked","infoAuto","marca","value","year","currentTarget","reset","onSubmit","this","name","ref","type","Component","obtenerDiferenciaAnio","Date","getFullYear","calcularMarca","modelo","incremento","obtenerPlan","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","datos","Resultado","resultado","mensaje","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","App","state","parseFloat","toFixed","console","log","datosAuto","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5398220.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = props => {\r\n    return(\r\n        <header className=\"top\">\r\n            <h1>\r\n                {props.title}\r\n            </h1>\r\n        </header>\r\n    )\r\n}\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nexport default class Formulario extends Component {\r\n\r\n    //refs son para leer los valores de los campos del formulario\r\n    marcaRef = React.createRef()\r\n    yearRef = React.createRef()\r\n    planBasicoRef = React.createRef()\r\n    planCompletoRef = React.createRef()\r\n\r\n    cotizarSeguro = (e) => {\r\n        e.preventDefault()\r\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo'\r\n\r\n        //crear el objeto\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year: this.yearRef.current.value,\r\n            plan: plan\r\n        }\r\n\r\n        //enviar al componente principal\r\n        this.props.cotizarSeguro(infoAuto)\r\n\r\n        //resetear el formulario\r\n        e.currentTarget.reset()\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    <select name=\"marca\" ref={this.marcaRef}>\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef}>\r\n                        <option value=\"2020\">2020</option>\r\n                        <option value=\"2019\">2019</option>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                        <option value=\"2009\">2009</option>\r\n                        <option value=\"2008\">2008</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Plan:</label>\r\n                    <input type=\"radio\" name=\"plan\" value=\"basico\" ref={this.planBasicoRef}/> Básico\r\n                    <input type=\"radio\" name=\"plan\" value=\"completo\" ref={this.planCompletoRef}/> Completo\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","\r\nexport function obtenerDiferenciaAnio(year) {\r\n    return new Date().getFullYear() - year;\r\n }\r\n \r\n export function calcularMarca( modelo ) {\r\n     let incremento;\r\n \r\n     switch (modelo) {\r\n         case 'europeo':\r\n             incremento = 1.30;\r\n             break;\r\n         case 'americano':\r\n             incremento = 1.15;\r\n             break;\r\n         case 'asiatico':\r\n             incremento = 1.05;\r\n             break;\r\n         default:\r\n             break;\r\n     }\r\n \r\n     return incremento;\r\n }\r\n export function obtenerPlan( plan ) {\r\n     return (plan === 'basico') ? 1.20 : 1.50;\r\n }\r\n export function primeraMayuscula(texto) {\r\n     return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n }","import React, { Component } from 'react'\r\nimport { primeraMayuscula } from '../helper'\r\n\r\nexport default class Resumen extends Component {\r\n\r\n    mostrarResumen = () => {\r\n        const {marca, year, plan} = this.props.datos\r\n\r\n        if(!marca || !year || !plan) return null\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen de la Cotización</h2>\r\n                <ul>\r\n                    <li>Marca: {primeraMayuscula(marca)}</li>\r\n                    <li>Plan: {primeraMayuscula(plan)}</li>\r\n                    <li>Año el Auto: {year}</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.mostrarResumen() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\nexport default class Resultado extends Component {\r\n    render() {\r\n        const resultado = this.props.resultado\r\n        const mensaje = (!resultado) ? 'Elige la Marca, Año y Plan para cotizar su Auto' : 'El Precio es de: $'\r\n        return (\r\n            <div className=\"gran-total\">\r\n                {mensaje}\r\n                <TransitionGroup component=\"span\" className=\"resultado\">\r\n                    <CSSTransition \r\n                        classNames=\"resultado\" \r\n                        key={resultado} \r\n                        timeout={{enter: 500, exit: 500}}>\r\n                            <span>{resultado}</span>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Formulario from './Formulario'\nimport Resumen from './Resumen'\nimport Resultado from './Resultado'\nimport { obtenerDiferenciaAnio, calcularMarca, obtenerPlan } from '../helper'\n\nexport default class App extends Component {\n\n  state = {\n    resultado : '',\n    datos: {\n      marca: '',\n      year: '',\n      plan: ''\n    }\n  }\n  \n  cotizarSeguro = (datos) => {\n    const {marca, plan, year} = datos\n\n    //Agregar una base de 2000\n    let resultado = 2000\n\n    //obtener la diferencia de años y \n    const diferencia = obtenerDiferenciaAnio(year)\n    \n    //por cada año restar 3%\n    resultado -= ((diferencia * 3) * resultado ) / 100\n    //americano 15%, Asiatico 5% y Europeo 30% de incremento del valor actual\n    resultado = calcularMarca(marca) * resultado\n\n\n    // el plan del auto, el basico aumenta el valor en 20% y el completo 50%\n    resultado = parseFloat(obtenerPlan(plan) * resultado).toFixed(2)  \n    console.log(resultado)\n\n    const datosAuto = {\n      marca: marca,\n      year: year,\n      plan: plan\n    }\n    \n    this.setState({\n      resultado: resultado,\n      datos: datosAuto\n    })\n\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor\">\n        <Header \n          title=\"Cotizador de Seguros de Autos\"\n        />\n\n        <div className=\"contenedor-formulario\">\n          <Formulario \n            cotizarSeguro={this.cotizarSeguro}/> \n        </div>\n\n        <div className=\"contenedor-resumen\">\n          <Resumen \n            datos={this.state.datos}\n          />\n        </div>\n\n        <div className=\"contenedor-resultado\">\n          <Resultado \n            resultado={this.state.resultado}\n          />\n        </div>\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}