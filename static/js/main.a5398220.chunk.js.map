{"version":3,"sources":["components/Header.js","components/Formulario.js","helper.js","components/Resumen.js","components/Resultado.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","cotizarSeguro","e","preventDefault","plan","current","checked","infoAuto","marca","value","year","currentTarget","reset","onSubmit","this","name","ref","type","Component","obtenerDiferenciaAnio","Date","getFullYear","calcularMarca","modelo","incremento","obtenerPlan","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","datos","Resultado","resultado","mensaje","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","App","state","parseFloat","toFixed","console","log","datosAuto","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5398220.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = props => {\r\n    return(\r\n        <header className=\"top\">\r\n            <h1>\r\n                {props.title}\r\n            </h1>\r\n        </header>\r\n    )\r\n}\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nexport default class Formulario extends Component {\r\n\r\n    //refs son para leer los valores de los campos del formulario\r\n    marcaRef = React.createRef()\r\n    yearRef = React.createRef()\r\n    planBasicoRef = React.createRef()\r\n    planCompletoRef = React.createRef()\r\n\r\n    cotizarSeguro = (e) => {\r\n        e.preventDefault()\r\n        const plan = this.planBasicoRef.current.checked ? 'basico' : 'completo'\r\n\r\n        //crear el objeto\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year: this.yearRef.current.value,\r\n            plan: plan\r\n        }\r\n\r\n        //enviar al componente principal\r\n        this.props.cotizarSeguro(infoAuto)\r\n\r\n        //resetear el formulario\r\n        e.currentTarget.reset()\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    <select name=\"marca\" ref={this.marcaRef}>\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef}>\r\n                        <option value=\"2020\">2020</option>\r\n                        <option value=\"2019\">2019</option>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                        <option value=\"2009\">2009</option>\r\n                        <option value=\"2008\">2008</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Plan:</label>\r\n                    <input type=\"radio\" name=\"plan\" value=\"basico\" ref={this.planBasicoRef}/> Básico\r\n                    <input type=\"radio\" name=\"plan\" value=\"completo\" ref={this.planCompletoRef}/> Completo\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","\r\nexport function obtenerDiferenciaAnio(year) {\r\n    return new Date().getFullYear() - year;\r\n }\r\n \r\n export function calcularMarca( modelo ) {\r\n     let incremento;\r\n \r\n     switch (modelo) {\r\n         case 'europeo':\r\n             incremento = 1.30;\r\n             break;\r\n         case 'americano':\r\n             incremento = 1.15;\r\n             break;\r\n         case 'asiatico':\r\n             incremento = 1.05;\r\n             break;\r\n         default:\r\n             break;\r\n     }\r\n \r\n     return incremento;\r\n }\r\n export function obtenerPlan( plan ) {\r\n     return (plan === 'basico') ? 1.20 : 1.50;\r\n }\r\n export function primeraMayuscula(texto) {\r\n     return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n }","import React, { Component } from 'react'\r\nimport { primeraMayuscula } from '../helper'\r\n\r\nexport default class Resumen extends Component {\r\n\r\n    mostrarResumen = () => {\r\n        const {marca, year, plan} = this.props.datos\r\n\r\n        if(!marca || !year || !plan) return null\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen de la Cotización</h2>\r\n                <ul>\r\n                    <li>Marca: {primeraMayuscula(marca)}</li>\r\n                    <li>Plan: {primeraMayuscula(plan)}</li>\r\n                    <li>Año el Auto: {year}</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.mostrarResumen() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\nexport default class Resultado extends Component {\r\n    render() {\r\n        const resultado = this.props.resultado\r\n        const mensaje = (!resultado) ? 'Elige la Marca, Año y Plan para cotizar su Auto' : 'El Precio es de: $'\r\n        return (\r\n            <div className=\"gran-total\">\r\n                {mensaje}\r\n                <TransitionGroup component=\"span\" className=\"resultado\">\r\n                    <CSSTransition \r\n                        classNames=\"resultado\" \r\n                        key={resultado} \r\n                        timeout={{enter: 500, exit: 500}}>\r\n                            <span>{resultado}</span>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Header from './Header'\r\nimport Formulario from './Formulario'\r\nimport Resumen from './Resumen'\r\nimport Resultado from './Resultado'\r\nimport { obtenerDiferenciaAnio, calcularMarca, obtenerPlan } from '../helper'\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    resultado : '',\r\n    datos: {\r\n      marca: '',\r\n      year: '',\r\n      plan: ''\r\n    }\r\n  }\r\n  \r\n  cotizarSeguro = (datos) => {\r\n    const {marca, plan, year} = datos\r\n\r\n    //Agregar una base de 2000\r\n    let resultado = 2000\r\n\r\n    //obtener la diferencia de años y \r\n    const diferencia = obtenerDiferenciaAnio(year)\r\n    \r\n    //por cada año restar 3%\r\n    resultado -= ((diferencia * 3) * resultado ) / 100\r\n    //americano 15%, Asiatico 5% y Europeo 30% de incremento del valor actual\r\n    resultado = calcularMarca(marca) * resultado\r\n\r\n\r\n    // el plan del auto, el basico aumenta el valor en 20% y el completo 50%\r\n    resultado = parseFloat(obtenerPlan(plan) * resultado).toFixed(2)  \r\n    console.log(resultado)\r\n\r\n    const datosAuto = {\r\n      marca: marca,\r\n      year: year,\r\n      plan: plan\r\n    }\r\n    \r\n    this.setState({\r\n      resultado: resultado,\r\n      datos: datosAuto\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contenedor\">\r\n        <Header \r\n          title=\"Cotizador de Seguros de Autos\"\r\n        />\r\n\r\n        <div className=\"contenedor-formulario\">\r\n          <Formulario \r\n            cotizarSeguro={this.cotizarSeguro}/> \r\n        </div>\r\n\r\n        <div className=\"contenedor-resumen\">\r\n          <Resumen \r\n            datos={this.state.datos}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"contenedor-resultado\">\r\n          <Resultado \r\n            resultado={this.state.resultado}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}